/*
  Device PCI data capture
  This simulated PCI device recieves a file path in the attribute and displays the
  first 8 bytes of the attribute file as a parameter.

  This Software is part of Simics. The rights to copy, distribute,
  modify, or otherwise make use of this Software may be licensed only
  pursuant to the terms of an applicable license agreement.
  
  Copyright 2010-2021 Intel Corporation

*/

dml 1.4;

device pci_data_capture;
import "utility.dml";
param desc = "PCI data capture";
param documentation = "This simulated PCI device recieves a file path in the attribute and displays the first 8 bytes of the attribute file";

//this header statement imports header libraries from C directly
header %{
#include <stdio.h>
#include <stdlib.h>
%}

//extern statements for the usage of this library function calls of the imports defined above
extern FILE * fopen(const char *, const char *);
extern int fgetc(FILE *);
extern int fclose(FILE *);
extern typedef struct { } FILE;

/*
    imports the basic pci functionality
    template is applied for the pci_device 
*/
import "pci/common.dml";
is pci_device;


param pci_hotplug = true;

// constant size of buffer
param BUFFER_SIZE = 1198;

//variable with the file handle
session FILE * file;

/*
    simulates input data received by the device
    recieves a path to the file that will be populate in this device registers
*/

attribute input {
    param type = "s";
    session char* val;
    session int len;
    //get handler, gets called with called from CLI or the get interface
    method get() -> (attr_value_t) default {
        return SIM_make_attr_string(val != NULL ? val : "");
      
    }

    //set handler, gets called with called from CLI or the set interface
    method set(attr_value_t attr) throws default {
        local const char* attr_str = SIM_attr_string(attr);
        set_string(attr_str);

    }

    /* 
        set_string: copies the parmater char * to the internal char structure
        the old stored value is deleted 
    */
    method set_string(const char *ptr) {
        if (len > 0) {delete val;}
        len = strlen(ptr);
        val = new char[len + 1];
        strcpy(val, ptr);
    }
} 


bank pci_config {

    /* This attribute should contain a list of all BAR registers */
    param base_address_registers = ["base_address_0"];
 
    register vendor_id { param init_val = 0x104C; } // Texas Instruments
    register device_id { param init_val = 0xAC10; } // PC Card Controller

    register base_address_0 @ 0x10 is (memory_base_address_32) {
        param size_bits = 18;
        param map_func = 1;
    }
    register base_address_1 @ 0x14 is (no_base_address_32);
    register base_address_2 @ 0x18 is (no_base_address_32);
    register base_address_3 @ 0x1C is (no_base_address_32);
    register base_address_4 @ 0x20 is (no_base_address_32);
    register base_address_5 @ 0x24 is (no_base_address_32);
}

bank regs is function_mapped_bank {
    /* Each register bank need to have a unique function number,
       which should match with the map_func param in one BAR */
    param function = 1;

    register test_register size 4 @ 0x0 {
        param init_val = 0x0;
    }

    register buf_size size 4 @ 0x4 {
        param init_val = BUFFER_SIZE;
    }
    
    //when command register is written with a 1 then the device outputs current data 
    //stored in the input attribute
    register cmd size 4 @ 0x14 {
        is write;
        param init_val = 0x0;
        
        //called on write by the processor
        method write(uint64 value) {
            local uint32 index = 0;
            if (value == 0x1) {
                if(input.val != NULL) {
                    file = fopen(input.val, "r");
                    for (index = 0; index < BUFFER_SIZE; index++) {
                        local uint8 char_read = fgetc(file);
                        if (index == 0 || index == 1) {
                            format_type[index].set_val(char_read);
                        } else if (index <= 5) {
                            size_file[index].set_val(char_read);
                        } else if (index <= 10) {
                            image_data[index].set_val(char_read);
                        } else {                            
                            buffer[index].set_val(char_read);
                        }
                        log info, 4: "loaded val = 0x%x @ buffer[%d]", char_read, index;
                    }
                    fclose(file);
		        }
            }
        }
    }
    
    // Store the file type
    register format_type[i < 2] size 1 @ 0x18 {
        is read_only;
        param init_val = 0x0;
    }  

    // Store file size
    register size_file[i < 6] size 1 @ 0x1a {
        is read_only;
        param init_val = 0x0;
    } 

    // Stores the start of image data
    register image_data[i < 10] size 1 @ 0x1e {
        is read_only;
        param init_val = 0x0;
    }

    //for communicating initial 8 bytes of the file after command=1 and input attr value is populated
    register buffer[i < BUFFER_SIZE] size 1 @ 0x22 + i {
        is read_only;
        param init_val = 0x0;
    }
}
